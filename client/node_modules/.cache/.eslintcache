[{"/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/index.js":"1","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/App.js":"2","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/reportWebVitals.js":"3","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/hello.js":"4","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/foyer.js":"5","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/create-user.js":"6","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/classic-speed.js":"7","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/login.js":"8"},{"size":671,"mtime":1691453334597,"results":"9","hashOfConfig":"10"},{"size":717,"mtime":1691453334597,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1688696450902,"results":"12","hashOfConfig":"10"},{"size":1492,"mtime":1690254417710,"results":"13","hashOfConfig":"10"},{"size":6744,"mtime":1691551794962,"results":"14","hashOfConfig":"10"},{"size":6876,"mtime":1691453334597,"results":"15","hashOfConfig":"10"},{"size":1418,"mtime":1691453334597,"results":"16","hashOfConfig":"10"},{"size":4352,"mtime":1691453334597,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"lqt1d",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"21"},"/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/index.js",[],[],[],"/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/App.js",[],[],"/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/reportWebVitals.js",[],[],"/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/hello.js",[],[],"/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/foyer.js",["47","48","49","50"],[],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Container, Row, Col, Button, Form } from \"react-bootstrap\";\nimport { io } from \"socket.io-client\";\nimport \"../foyer.css\";\n\nexport default function Foyer() {\n  const socket = io(\"http://localhost:5050\");\n  //console.log(\"Socket connected from foyer.js:\", socket.connected)\n\n  const [name, setName] = useState();\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [hasEnteredChat, setHasEnteredChat] = useState(false);\n  const [roomNumber, setRoomNumber] = useState(\"\");\n  const [rooms, setRooms] = useState([]);\n  const emojis = [\n    \"🎮\",\n    \"❓\",\n    \"🃏\",\n    \"😀\",\n    \"😢\",\n    \"💩\",\n    \"🤡\",\n    \"👋\",\n    \"👍\",\n    \"🌴\",\n    \"✔️\",\n    \"💀\",\n    \"🤬\",\n    \"🤯\",\n    \"🧠\",\n    \"🥳\",\n  ];\n  const messagesContainerRef = useRef(null);\n\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n    });\n\n    //stop repeated messages\n    return () => {\n      socket.off(\"message\");\n    };\n  }, []);\n\n  const addEmojiToMessage = (emoji) => {\n    setMessage((prevMessage) => prevMessage + emoji);\n  };\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages container whenever new messages are added\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop =\n        messagesContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  //handles the regular messages\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"Form submitted with name:\", name, \"and message:\", message);\n\n    if (name && message) {\n      console.log(\"name: \" + name + \" message: \" + message);\n      socket.emit(\"sendMessage\", { name, message });\n      setMessage(\"\");\n\n      if (!hasEnteredChat) {\n        setMessages((messages) => [\n          ...messages,\n          { message: `${name} has entered the chat`, isInfoMessage: true },\n        ]);\n        setHasEnteredChat(true);\n      }\n    }\n  };\n\n  // Effect to handle room-related actions\n  useEffect(() => {\n    // Emit \"getRooms\" event to fetch the room list when the component mounts\n    socket.emit(\"getRooms\");\n\n    // Listen for \"roomList\" event and update rooms state\n    socket.on(\"roomList\", (roomList) => {\n      setRooms(roomList);\n    });\n\n    // Clean up socket listeners when the component unmounts\n    return () => {\n      socket.off(\"roomList\");\n    };\n  }, []);\n\n  const handleCreateRoom = () => {\n    if (roomNumber === \"\") {\n      socket.emit(\"createRoom\");\n      socket.on(\"roomCreated\", (roomID) => {\n        console.log(\"roomCreated event received with roomID:\", roomID);\n        setRoomNumber(roomID);\n      });\n      socket.on(\"roomList\", (roomList) => {\n        setRooms(roomList);\n      });\n    }\n  };\n\n  const handleJoinRoom = (roomID) => {\n    socket.emit(\"joinRoom\", roomID);\n    socket.on(\"roomJoined\", (roomID) => {\n      console.log(\"roomJoined event received with roomID:\", roomID);\n      setRoomNumber(roomID);\n    });\n  };\n\n  const handleEmitRoom = () => {\n    socket.emit(\"emitRoom\", roomNumber);\n  };\n\n  useEffect(() => {\n    socket.on(\"roomEmitted\", (roomID) => {\n      console.log(\"roomEmitted event received with roomID:\", roomID);\n    });\n  }, []);\n\n  // Retrieve the username from local storage\n  useEffect(() => {\n    const createdUsername = localStorage.getItem(\"userName\");\n    if (createdUsername) {\n      setName(createdUsername);\n    }\n  }, []);\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col xs={12} md={8}>\n            <div className=\"room-all\">\n              <h2>Foyer Room</h2>\n              <h4>Global Room</h4>\n            </div>\n            {rooms.map((room) => (\n              <div className=\"room-info\" key={room}>\n                <h5>{room.slice(-6)}</h5>\n                {/* <p>Amount of Users: {room.users.length}/2</p> */}\n                <Button variant=\"primary\" onClick={() => handleJoinRoom(room)}>\n                  Join Foyer\n                </Button>\n              </div>\n            ))}\n\n            <br />\n            <br />\n\n            <h6>Created Rooms</h6>\n            <button onClick={() => handleCreateRoom()}>Classic</button>\n            <button>California</button>\n            <button onClick={() => handleEmitRoom()}>Emit Room</button>\n          </Col>\n\n          <Col xs={12} md={4} className=\"chat-box\">\n            <form onSubmit={handleSubmit}>\n              {!hasEnteredChat && (\n                <input\n                  type=\"text\"\n                  disabled={true}\n                  value={name}\n                  placeholder=\"Enter User Name\"\n                  onChange={(e) => setName(e.target.value)}\n                  style={{ width: \"100%\" }}\n                />\n              )}\n              {hasEnteredChat && (\n                <p>\n                  Username:<strong> {name}</strong>\n                </p>\n              )}\n              <input\n                type=\"text\"\n                value={message}\n                placeholder=\"Your message\"\n                onChange={(e) => setMessage(e.target.value)}\n                style={{ width: \"100%\" }}\n              />\n              <div className=\"emoji-buttons-container\">\n                {emojis.map((emoji, index) => (\n                  <Button\n                    style={{\n                      fontSize: \"20px\",\n                      background: \"none\",\n                      border: \"none\",\n                    }}\n                    key={index}\n                    variant=\"primary\"\n                    className=\"emoji-button\"\n                    onClick={() => addEmojiToMessage(emoji)}\n                  >\n                    {emoji}\n                  </Button>\n                ))}\n              </div>\n              <button className=\"sendButton\" type=\"submit\">\n                Send\n              </button>\n              <br />\n            </form>\n            <div>\n              <br />\n              <div className=\"messages-container\" ref={messagesContainerRef}>\n                {messages.map((message, index) => (\n                  <div\n                    key={index}\n                    className={\n                      message.isInfoMessage\n                        ? \"message-left\"\n                        : message.name === name\n                        ? \"message-left\"\n                        : \"message-right\"\n                    }\n                  >\n                    <span className=\"username\">{message.name}</span>{\" \"}\n                    <span className=\"message-content\">: {message.message}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/create-user.js",["51","52"],[],"import React, {useState, useEffect} from 'react';\nimport { Col, Button, Row, Container, Card, Form } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport {sha256} from 'js-sha256';\nimport { io } from \"socket.io-client\";\n\nexport default function CreateUser(){\n    const[form, setForm] = useState({\n        userName:\"\",\n        saltScore:\"\",\n        password:\"\",\n        reenter: \"\",\n        email: \"\",\n    });\n\n    const navigate = useNavigate();\n    async function handleSubmit(e){\n        e.preventDefault();\n\n        if(form.password === form.reenter){\n            if(form.password.length >= 16){\n                let saltTemp = Math.floor(Math.random()*1000000000);\n                let tempHash = form.password.concat(saltTemp.toString());\n\n                let hash = (sha256(tempHash));\n                form.saltScore = saltTemp;\n                form.password = hash;\n                form.reenter = hash;\n\n                const newUser = {...form};\n\n                await fetch(\"http://localhost:5050/create-user\",{\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(newUser),\n                }).catch(error =>{\n                    window.alert(error);\n                    return;\n                });\n                localStorage.setItem(\"userName\", form.userName); //setting username to local storage to pass around\n                navigate('/Foyer');\n            }\n            else{\n                alert(\"Password must be at least 16 characters\");\n            }\n        }\n        else{\n            alert(\"Passwords Do Not Match please Re-Enter\");\n        }\n    }\n    function handleChange(value){\n        return setForm((prev)=>{\n            return{...prev, ...value};\n        })\n    }\n    return(\n        <div>\n            <Container>\n                <Row className=\"vh-100 d-flex justify-content-center align-items-center\">\n                    <Col md={8} lg={6} xs={12}>\n                        <Card className='px-4'>\n                            <Card.Body>\n                                <div className=\"mb-3 mt-md-4\">\n                                    <h2 className=\"fw-bold mb-2 text-center text-uppercase\">\n                                        Speed!\n                                    </h2>\n                                    <div className=\"mb-3\">\n                                        <Form onSubmit={handleSubmit}>\n                                            <Form.Group className='mb-3' controlId='Name'>\n                                                <Form.Label className=\"text-center\">\n                                                    Username\n                                                </Form.Label>\n                                                <Form.Control type=\"text\" \n                                                            name=\"username\" \n                                                            id = \"username\" \n                                                            onChange={(e) => handleChange({ userName: e.target.value })} \n                                                            placeholder=\"Enter Username\"/>\n                                            </Form.Group>\n\n                                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                                <Form.Label className=\"text-center\">\n                                                    Email Address\n                                                </Form.Label>\n                                                <Form.Control type=\"email\"\n                                                            name=\"email\"\n                                                            id=\"email\"\n                                                            onChange={(e) => handleChange({ email: e.target.value })}\n                                                            placeholder=\"Enter Email\"/>\n                                            </Form.Group>\n\n                                            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                                                <Form.Label class=\"text-center\">\n                                                    Password\n                                                </Form.Label>\n                                                <Form.Control type=\"password\" \n                                                            name=\"password\"\n                                                            id=\"password\"\n                                                            onChange={(e) => handleChange({ password: e.target.value })}\n                                                            placeholder=\"Password\" />\n                                            </Form.Group>\n\n                                            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                                                <Form.Label class=\"text-center\">\n                                                    Re-Enter Password\n                                                </Form.Label>\n                                                <Form.Control type=\"password\" \n                                                            name=\"reenter\"\n                                                            id=\"reenter\"\n                                                            onChange={(e) => handleChange({ reenter: e.target.value })}\n                                                            placeholder=\"Password\" />\n                                            </Form.Group>\n                                            <div className=\"d-grid\">\n                                                <Button variant=\"primary\" type=\"submit\">\n                                                    Create Account\n                                                </Button>\n                                            </div>\n                                        </Form>\n                                        <div className=\"mt-3\">\n                                            <p className=\"mb-0  text-center\">\n                                                Already have an account?{' '}\n                                                <a href=\"/\" className=\"text-primary fw-bold\">\n                                                    Sign In\n                                                </a>\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n\n}","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/classic-speed.js",["53","54","55","56","57","58","59"],[],"import React, {useState, useEffect} from 'react';\nimport { Col, Button, Row, Container, Card, Form } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport { io } from \"socket.io-client\";\nimport \"../game.css\"\n\nexport default function CreateUser(){\n    return(\n        <div>\n            <Container>\n                <Row xs={12} md ={4}>\n                    <Col xs={12} md={8}>\n                        Player 2 Hand\n                    </Col>\n                    <Col xs={12} md={4}>\n                        Player 2 Draw Deck\n                    </Col>\n                </Row>\n                <Row xs={12} md ={4}>\n                    <Col xs={12} md={3}>\n                        Left Pull Pile\n                    </Col>\n                    <Col xs={12} md={3}>\n                        Left Play Pile\n                    </Col>\n                    <Col xs={12} md={3}>\n                        Right Play Pile\n                    </Col>\n                    <Col xs={12} md={3}>\n                        Right Pull Pile\n                    </Col>\n                </Row>\n                <Row xs={12} md ={4}>\n                    <Col xs={12} md={8}>\n                        Player 1 Hand\n                    </Col>\n                    <Col xs={12} md={4}>\n                        Player 1 Draw Deck\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};","/home/architect/Documents/School/Soft-3750/cs3750SpeedProject/client/src/components/login.js",["60"],[],"import React, {useState, useEffect} from 'react';\nimport { Col, Button, Row, Container, Card, Form } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport {sha256} from 'js-sha256';\n\nexport default function Login(){\n    const[form, setForm] =useState({\n        userName: \"\",\n        password: \"\",\n    });\n    const navigate = useNavigate();\n    async function handleSubmit(e){\n        e.preventDefault();\n\n        const userResponse = await fetch(\"http://localhost:5050/login-user\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({username: form.userName}),\n        }).catch(error => {\n            window.alert(error);\n            return;\n        });\n        const salt =await userResponse.json();\n        \n        if(salt.saltScore)\n        {\n            let hash = sha256(form.password.concat(salt.saltScore.toString()));\n            form.password = hash;\n            const credentials = {...form}\n            const passResponse = await fetch(\"http://localhost:5050/login-password\",{\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(credentials),\n            }).catch(error => {\n                window.alert(error);\n                return;\n            });\n\n            const loggedIn = await passResponse.json();\n            if(loggedIn.signedIn)\n            {\n                navigate(\"/foyer\");\n            }\n            else{\n                alert(\"Invalid Password\");\n            }\n\n        }\n        else{\n            alert(\"Invalid Username\");\n        }\n    }\n    \n    function handleChange(value){\n        return setForm((prev)=>{\n            return{...prev, ...value};\n        })\n    }\n\n    return(\n        <div>\n        <Container>\n          <Row className=\"vh-100 d-flex justify-content-center align-items-center\">\n            <Col md={8} lg={6} xs={12}>\n            <div className=\"border border-2 border-primary\"></div>\n              <Card className=\"shadow px-4\">\n                <Card.Body>\n                  <div className=\"mb-3 mt-md-4\">\n                    <h2 className=\"fw-bold mb-2 text-center text-uppercase \">Logo</h2>\n                    <div className=\"mb-3\">\n                      <Form onSubmit={handleSubmit}>\n                        <Form.Group className=\"mb-3\" controlId=\"Name\">\n                          <Form.Label className=\"text-center\">\n                            Username\n                          </Form.Label>\n                          <Form.Control type=\"text\" \n                            name=\"userName\"\n                            id=\"userName\"\n                            onChange={(e) => handleChange({ userName: e.target.value })}\n                            placeholder=\"Enter Name\" />\n                        </Form.Group>\n  \n                        <Form.Group\n                          className=\"mb-3\"\n                          controlId=\"formBasicPassword\"\n                        >\n                          <Form.Label>Password</Form.Label>\n                          <Form.Control type=\"password\" \n                                        name=\"password\"\n                                        id=\"password\"\n                                        onChange={(e) => handleChange({ password: e.target.value })}\n                                        placeholder=\"Password\" />\n                        </Form.Group>\n                        \n                        <div className=\"d-grid\">\n                          <Button variant=\"primary\" type=\"submit\">\n                            Login\n                          </Button>\n                        </div>\n                      </Form>\n                      <div className=\"mt-3\">\n                         <p className=\"mb-0  text-center\">\n                            Don't have an account?{' '}\n                            <a href=\"/create-user\" className=\"text-primary fw-bold\">\n                              Sign Up\n                            </a>\n                          </p>\n                        </div>\n                    </div>\n                  </div>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n}",{"ruleId":"61","severity":1,"message":"62","line":2,"column":39,"nodeType":"63","messageId":"64","endLine":2,"endColumn":43},{"ruleId":"65","severity":1,"message":"66","line":45,"column":6,"nodeType":"67","endLine":45,"endColumn":8,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"66","line":93,"column":6,"nodeType":"67","endLine":93,"endColumn":8,"suggestions":"69"},{"ruleId":"65","severity":1,"message":"66","line":124,"column":6,"nodeType":"67","endLine":124,"endColumn":8,"suggestions":"70"},{"ruleId":"61","severity":1,"message":"71","line":1,"column":26,"nodeType":"63","messageId":"64","endLine":1,"endColumn":35},{"ruleId":"61","severity":1,"message":"72","line":5,"column":10,"nodeType":"63","messageId":"64","endLine":5,"endColumn":12},{"ruleId":"61","severity":1,"message":"73","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":24},{"ruleId":"61","severity":1,"message":"71","line":1,"column":26,"nodeType":"63","messageId":"64","endLine":1,"endColumn":35},{"ruleId":"61","severity":1,"message":"74","line":2,"column":15,"nodeType":"63","messageId":"64","endLine":2,"endColumn":21},{"ruleId":"61","severity":1,"message":"75","line":2,"column":39,"nodeType":"63","messageId":"64","endLine":2,"endColumn":43},{"ruleId":"61","severity":1,"message":"62","line":2,"column":45,"nodeType":"63","messageId":"64","endLine":2,"endColumn":49},{"ruleId":"61","severity":1,"message":"76","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":21},{"ruleId":"61","severity":1,"message":"72","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":12},{"ruleId":"61","severity":1,"message":"71","line":1,"column":26,"nodeType":"63","messageId":"64","endLine":1,"endColumn":35},"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["77"],["78"],["79"],"'useEffect' is defined but never used.","'io' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'useNavigate' is defined but never used.",{"desc":"80","fix":"81"},{"desc":"80","fix":"82"},{"desc":"80","fix":"83"},"Update the dependencies array to be: [socket]",{"range":"84","text":"85"},{"range":"86","text":"85"},{"range":"87","text":"85"},[1075,1077],"[socket]",[2439,2441],[3250,3252]]